(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{427:function(v,_,e){"use strict";e.r(_);var t=e(26),a=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"html-面试常见问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html-面试常见问题"}},[v._v("#")]),v._v(" HTML 面试常见问题")]),v._v(" "),e("h2",{attrs:{id:"doctype-的作用是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#doctype-的作用是什么"}},[v._v("#")]),v._v(" DOCTYPE 的作用是什么？")]),v._v(" "),e("p",[e("code",[v._v("IE5.5")]),v._v(" 引入了文档模式的概念，而这个概念是通过使用文档类型"),e("code",[v._v("（DOCTYPE）")]),v._v("切换实现的。\n"),e("code",[v._v("<!DOCTYPE>")]),v._v("声明位于 "),e("code",[v._v("HTML")]),v._v(" 文档中的第一行，处于 "),e("code",[v._v("<html>")]),v._v(" 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。\n"),e("code",[v._v("DOCTYPE")]),v._v(" 不存在或格式不正确会导致文档以兼容模式呈现。")]),v._v(" "),e("p",[e("code",[v._v("<!DOCTYPE>")]),v._v("  声明一般位于文档的第一行，它的作用主要是告诉浏览器以什么样的模式来解析文档。一般指定了之后会以标准模式来\n进行文档解析，否则就以兼容模式进行解析。在标准模式下，浏览器的解析规则都是按照最新的标准进行解析的。而在兼容模式下，浏\n览器会以向后兼容的方式来模拟老式浏览器的行为，以保证一些老的网站的正确访问。")]),v._v(" "),e("p",[v._v("在 "),e("code",[v._v("html5")]),v._v(" 之后不再需要指定 "),e("code",[v._v("DTD")]),v._v(" 文档，因为 "),e("code",[v._v("html5")]),v._v(" 以前的 "),e("code",[v._v("html")]),v._v(" 文档都是基于 "),e("code",[v._v("SGML")]),v._v(" 的，所以需要通过指定 "),e("code",[v._v("DTD")]),v._v(" 来定义文\n档中允许的属性以及一些规则。而 "),e("code",[v._v("html5")]),v._v(" 不再基于 "),e("code",[v._v("SGML")]),v._v(" 了，所以不再需要使用 "),e("code",[v._v("DTD")]),v._v("。")]),v._v(" "),e("h2",{attrs:{id:"标准模式与兼容模式各有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标准模式与兼容模式各有什么区别"}},[v._v("#")]),v._v(" 标准模式与兼容模式各有什么区别？")]),v._v(" "),e("p",[v._v("标准模式的渲染方式和 JS 引擎的解析方式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示\n，模拟老式浏览器的行为以防止站点无法工作。")]),v._v(" "),e("h2",{attrs:{id:"html5-为什么只需要写-而不需要引入-dtd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html5-为什么只需要写-而不需要引入-dtd"}},[v._v("#")]),v._v(" HTML5 为什么只需要写 <!DOCTYPE HTML>，而不需要引入 DTD？")]),v._v(" "),e("p",[e("code",[v._v("HTML5")]),v._v(" 不基于 "),e("code",[v._v("SGML")]),v._v("，因此不需要对 "),e("code",[v._v("DTD")]),v._v(" 进行引用，但是需要 "),e("code",[v._v("DOCTYPE")]),v._v(" 来规范浏览器的行为（让浏览器按照它们应该的方式来运行）。\n而 "),e("code",[v._v("HTML4.01")]),v._v(" 基于 "),e("code",[v._v("SGML")]),v._v(" ，所以需要对 "),e("code",[v._v("DTD")]),v._v(" 进行引用，才能告知浏览器文档所使用的文档类型。")]),v._v(" "),e("h2",{attrs:{id:"行内元素定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行内元素定义"}},[v._v("#")]),v._v(" 行内元素定义")]),v._v(" "),e("p",[v._v("HTML4 中，元素被分成两大类: "),e("code",[v._v("inline")]),v._v(" （内联元素）与 "),e("code",[v._v("block")]),v._v("（块级元素）。一个行内元素只占据它对应标签的边框所包含的空间。"),e("br"),v._v("\n常见的行内元素有 "),e("code",[v._v("a b span img strong sub sup button input label select textarea")])]),v._v(" "),e("h2",{attrs:{id:"块级元素定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#块级元素定义"}},[v._v("#")]),v._v(" 块级元素定义")]),v._v(" "),e("p",[v._v("块级元素占据其父元素（容器）的整个宽度，因此创建了一个“块”。"),e("br"),v._v("\n常见的块级元素有  "),e("code",[v._v("div ul ol li dl dt dd h1 h2 h3 h4 h5 h6 p")])]),v._v(" "),e("h2",{attrs:{id:"行内元素与块级元素的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行内元素与块级元素的区别"}},[v._v("#")]),v._v(" 行内元素与块级元素的区别？")]),v._v(" "),e("p",[e("code",[v._v("HTML4")]),v._v("中，元素被分成两大类："),e("code",[v._v("inline")]),v._v(" （内联元素）与 "),e("code",[v._v("block")]),v._v(" （块级元素）。"),e("br"),v._v("\n（1） 格式上，默认情况下，行内元素不会以新行开始，而块级元素会新起一行。"),e("br"),v._v("\n（2） 内容上，默认情况下，行内元素只能包含文本和其他行内元素。而块级元素可以包含行内元素和其他块级元素。"),e("br"),v._v("\n（3） 行内元素与块级元素属性的不同，主要是盒模型属性上：行内元素设置 "),e("code",[v._v("width")]),v._v(" 无效，"),e("code",[v._v("height")]),v._v(" 无效（可以设置 "),e("code",[v._v("line-height")]),v._v("），设置 "),e("code",[v._v("margin")]),v._v(" 和 "),e("code",[v._v("padding")]),v._v(" 的上下不会对其他元素产生影响。")]),v._v(" "),e("h2",{attrs:{id:"html5-元素的分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html5-元素的分类"}},[v._v("#")]),v._v(" HTML5 元素的分类")]),v._v(" "),e("p",[e("code",[v._v("HTML4")]),v._v("中，元素被分成两大类: "),e("code",[v._v("inline")]),v._v("（内联元素）与 "),e("code",[v._v("block")]),v._v("（块级元素）。但在实际的开发过程中，因为页面表现的需要，前端工程师经常把 "),e("code",[v._v("inline")]),v._v(" 元素的 "),e("code",[v._v("display")]),v._v(" 值设定为 "),e("code",[v._v("block")]),v._v(" （比如 "),e("code",[v._v("a")]),v._v(" 标签），也经常把 "),e("code",[v._v("block")]),v._v(" 元素的 "),e("code",[v._v("display")]),v._v(" 值设定为"),e("code",[v._v("inline")]),v._v(" 之后更是出现了 "),e("code",[v._v("inline-block")]),v._v(" 这一对外呈现 "),e("code",[v._v("inline")]),v._v(" 对内呈现 "),e("code",[v._v("block")]),v._v(" 的属性。因此，简单地把 "),e("code",[v._v("HTML")]),v._v("元素划分"),e("code",[v._v("inline")]),v._v(" 与 "),e("code",[v._v("block")]),v._v(" 已经不再符合实际需求。")]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[e("code",[v._v("HTML5")]),v._v("中，元素主要分为7类："),e("code",[v._v("Metadata Flow Sectioning Heading Phrasing Embedded Interactive")])])]),v._v(" "),e("h2",{attrs:{id:"空元素定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空元素定义"}},[v._v("#")]),v._v(" 空元素定义")]),v._v(" "),e("p",[v._v("标签内没有内容的 "),e("code",[v._v("HTML")]),v._v(" 标签被称为空元素。空元素是在开始标签中关闭的。"),e("br"),v._v("\n常见的空元素有："),e("code",[v._v("br hr img input link meta")])]),v._v(" "),e("h2",{attrs:{id:"link-标签定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#link-标签定义"}},[v._v("#")]),v._v(" link 标签定义")]),v._v(" "),e("p",[e("code",[v._v("link")]),v._v(" 标签定义文档与外部资源的关系。\n"),e("code",[v._v("link")]),v._v(" 元素是空元素，它仅包含属性。 此元素只能存在于 head 部分，不过它可出现任何次数。\n"),e("code",[v._v("link")]),v._v(" 标签中的 "),e("code",[v._v("rel")]),v._v(" 属性定义了当前文档与被链接文档之间的关系。常见的 "),e("code",[v._v("stylesheet")]),v._v(" 指的是定义一个外部加载的样式表。")]),v._v(" "),e("h2",{attrs:{id:"页面导入样式时-使用-link-和-import-有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#页面导入样式时-使用-link-和-import-有什么区别"}},[v._v("#")]),v._v(" 页面导入样式时，使用 link 和 @import 有什么区别？")]),v._v(" "),e("p",[v._v("（1）从属关系区别。 "),e("code",[v._v("@import")]),v._v(" 是 CSS 提供的语法规则，只有导入样式表的作用；"),e("code",[v._v("link")]),v._v("是 HTML 提供的标签，不仅可以加载 CSS 文件，还可以定义 "),e("code",[v._v("RSS、rel")]),v._v(" 连接属性、引入网站图标等。"),e("br"),v._v("\n（2）加载顺序区别。加载页面时，"),e("code",[v._v("link")]),v._v(" 标签引入的 CSS 被同时加载；"),e("code",[v._v("@import")]),v._v(" 引入的 CSS 将在页面加载完毕后被加载。"),e("br"),v._v("\n（3）兼容性区别。"),e("code",[v._v("@import")]),v._v(" 是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；"),e("code",[v._v("link")]),v._v(" 标签作为 HTML 元素，不存在兼容性问题。"),e("br"),v._v("\n（4）DOM 可控性区别。可以通过 "),e("code",[v._v("JS")]),v._v(" 操作 "),e("code",[v._v("DOM")]),v._v(" ，插入 "),e("code",[v._v("link")]),v._v(" 标签来改变样式；由于 DOM 方法是基于文档的，无法使用 "),e("code",[v._v("@import")]),v._v(" 的方式插入样式。")]),v._v(" "),e("h2",{attrs:{id:"介绍一下你对浏览器内核的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍一下你对浏览器内核的理解"}},[v._v("#")]),v._v(" 介绍一下你对浏览器内核的理解？")]),v._v(" "),e("p",[v._v("主要分成两部分："),e("code",[v._v("渲染引擎")]),v._v("和 "),e("code",[v._v("JS 引擎")]),v._v("。"),e("br"),v._v("\n渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 "),e("code",[v._v("html、xml")]),v._v(" 文档及图片，它也可以借助插件（一种浏览器扩展）显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。"),e("br"),v._v(" "),e("code",[v._v("JS 引擎")]),v._v("：解析和执行 "),e("code",[v._v("javascript")]),v._v(" 来实现网页的动态效果。"),e("br"),v._v("\n最开始"),e("code",[v._v("渲染引擎")]),v._v("和 "),e("code",[v._v("JS 引擎")]),v._v("并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。")]),v._v(" "),e("h2",{attrs:{id:"浏览器的渲染原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染原理"}},[v._v("#")]),v._v(" 浏览器的渲染原理？")]),v._v(" "),e("p",[v._v("（1）首先解析收到的文档，根据文档定义构建一棵 "),e("code",[v._v("DOM 树")]),v._v("，"),e("code",[v._v("DOM 树")]),v._v("是由 "),e("code",[v._v("DOM 元素")]),v._v("及属性节点组成的。"),e("br"),v._v("\n（2）然后对 "),e("code",[v._v("CSS")]),v._v(" 进行解析，生成 "),e("code",[v._v("CSSOM")]),v._v(" 规则树。"),e("br"),v._v("\n（3）根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩形，渲染对象和 DOM 元素相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些 DOM元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。"),e("br"),v._v("\n（4）当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。"),e("br"),v._v("\n（5）布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 "),e("code",[v._v("paint 方法")]),v._v("将它们的内容显示在屏幕上，绘制使用 "),e("code",[v._v("UI 基础组件")]),v._v("。")]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[v._v("值得注意的是，这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。")])]),v._v(" "),e("h2",{attrs:{id:"渲染过程中遇到-js-文件怎么处理-浏览器解析过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程中遇到-js-文件怎么处理-浏览器解析过程"}},[v._v("#")]),v._v(" 渲染过程中遇到 JS 文件怎么处理？（浏览器解析过程）")]),v._v(" "),e("p",[e("code",[v._v("JavaScript")]),v._v(" 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 "),e("code",[v._v("DOM")]),v._v(" 时，"),e("code",[v._v("HTML 解析器")]),v._v("若遇到了 "),e("code",[v._v("JavaScript")]),v._v("，那么它会暂停文档的解析，将控制权移交给 "),e("code",[v._v("JavaScript 引擎")]),v._v("，等 "),e("code",[v._v("JavaScript")]),v._v(" 引擎运行完毕，浏览器再从中断的地方恢复继续解析文档。"),e("br"),v._v("\n也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将"),e("code",[v._v("script")]),v._v("标签放在 "),e("code",[v._v("body")]),v._v(" 标签底部的原因。当然在当下，并不是说 "),e("code",[v._v("script")]),v._v(" 标签必须放在底部，因为你可以给 "),e("code",[v._v("script")]),v._v(" 标签添加 "),e("code",[v._v("defer")]),v._v(" 或者 "),e("code",[v._v("async")]),v._v(" 属性。")]),v._v(" "),e("h2",{attrs:{id:"async-和-defer-的作用是什么-有什么区别-浏览器解析过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#async-和-defer-的作用是什么-有什么区别-浏览器解析过程"}},[v._v("#")]),v._v(" async 和 defer 的作用是什么？有什么区别？（浏览器解析过程）")]),v._v(" "),e("p",[v._v("（1）脚本没有 "),e("code",[v._v("defer")]),v._v(" 或 "),e("code",[v._v("async")]),v._v("，浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。"),e("br"),v._v("\n（2）"),e("code",[v._v("defer")]),v._v(" 属性表示延迟执行引入的 "),e("code",[v._v("JavaScript")]),v._v("，即这段 "),e("code",[v._v("JavaScript")]),v._v(" 加载时 "),e("code",[v._v("HTML")]),v._v(" 并未停止解析，这两个过程是并行的。当整个 "),e("code",[v._v("document")]),v._v(" 解析完毕后再执行脚本文件，在 "),e("code",[v._v("DOMContentLoaded")]),v._v(" 事件触发之前完成。多个脚本按顺序执行。"),e("br"),v._v("\n（3）"),e("code",[v._v("async")]),v._v(" 属性表示异步执行引入的 "),e("code",[v._v("JavaScript")]),v._v("，与 "),e("code",[v._v("defer")]),v._v(" 的区别在于，如果已经加载好，就会开始执行，也就是说它的执行仍然会阻塞文档的解析，只是它的加载过程不会阻塞。多个脚本的执行顺序无法保证。")]),v._v(" "),e("h2",{attrs:{id:"什么是文档的预解析-浏览器解析过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是文档的预解析-浏览器解析过程"}},[v._v("#")]),v._v(" 什么是文档的预解析？（浏览器解析过程）")]),v._v(" "),e("p",[e("code",[v._v("Webkit")]),v._v(" 和 "),e("code",[v._v("Firefox")]),v._v(" 都做了这个优化，当执行 "),e("code",[v._v("JavaScript")]),v._v(" 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载从而使整体速度更快。需要注意的是，预解析并不改变 "),e("code",[v._v("DOM 树")]),v._v("，它将这个工作留给主解析过程，自己只解析外部资源的引用，比如外部脚本、样式表及图片。")]),v._v(" "),e("h2",{attrs:{id:"css-如何阻塞文档解析-浏览器解析过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-如何阻塞文档解析-浏览器解析过程"}},[v._v("#")]),v._v(" CSS 如何阻塞文档解析？（浏览器解析过程）")]),v._v(" "),e("p",[v._v("理论上，既然样式表不改变 "),e("code",[v._v("DOM 树")]),v._v("，也就没有必要停下文档的解析等待它们，然而，存在一个问题，"),e("code",[v._v("JavaScript")]),v._v(" 脚本执行时可能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。"),e("br"),v._v("\n所以如果浏览器尚未完成 "),e("code",[v._v("CSSOM")]),v._v(" 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 "),e("code",[v._v("JavaScript")]),v._v(" 脚本执行和文档的解析，直至其完成 "),e("code",[v._v("CSSOM")]),v._v(" 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 "),e("code",[v._v("CSSOM")]),v._v("，然后再执行 "),e("code",[v._v("JavaScript")]),v._v("，最后再继续文档的解析。")]),v._v(" "),e("h2",{attrs:{id:"渲染页面时常见哪些不良现象-浏览器渲染过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染页面时常见哪些不良现象-浏览器渲染过程"}},[v._v("#")]),v._v(" 渲染页面时常见哪些不良现象？（浏览器渲染过程）")]),v._v(" "),e("p",[e("code",[v._v("FOUC")]),v._v("：主要指的是样式闪烁的问题，由于浏览器渲染机制（比如firefox），在 "),e("code",[v._v("CSS")]),v._v(" 加载之前，先呈现了 "),e("code",[v._v("HTML")]),v._v("，就会导致展示出无样式内容，然后样式突然呈现的现象。会出现这个问题的原因主要是 "),e("code",[v._v("css")]),v._v("加载时间过长，或者 "),e("code",[v._v("css")]),v._v(" 被放在了文档底部。"),e("br"),v._v(" "),e("code",[v._v("白屏")]),v._v("：有些浏览器渲染机制（比如chrome）要先构建 "),e("code",[v._v("DOM")]),v._v(" 树和 "),e("code",[v._v("CSSOM")]),v._v(" 树，构建完成后再进行渲染，如果 "),e("code",[v._v("CSS")]),v._v(" 部分放在 "),e("code",[v._v("HTML")]),v._v("尾部，由于 "),e("code",[v._v("CSS")]),v._v(" 未加载完成，浏览器迟迟未渲染，从而导致白屏；也可能是把 "),e("code",[v._v("js")]),v._v(" 文件放在头部，脚本的加载会阻塞后面文档内容的解析，从而页面迟迟未渲染出来，出现白屏问题。")]),v._v(" "),e("h2",{attrs:{id:"如何优化关键渲染路径-浏览器渲染过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何优化关键渲染路径-浏览器渲染过程"}},[v._v("#")]),v._v(" 如何优化关键渲染路径？（浏览器渲染过程）")]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[v._v("为尽快完成首次渲染，我们需要最大限度减小以下三种可变因素："),e("br"),v._v("\n（1）关键资源的数量。"),e("br"),v._v("\n（2）关键路径长度。"),e("br"),v._v("\n（3）关键字节的数量。")])]),v._v(" "),e("p",[v._v("关键资源是可能阻止网页首次渲染的资源。这些资源越少，浏览器的工作量就越小，对 "),e("code",[v._v("CPU")]),v._v(" 以及其他资源的占用也就越少。"),e("br"),v._v("\n同样，关键路径长度受所有关键资源与其字节大小之间依赖关系图的影响：某些资源只能在上一资源处理完毕之后才能开始下载，并且资源越大，下载所需的往返次数就越多。")]),v._v(" "),e("p",[v._v("最后，浏览器需要下载的关键字节越少，处理内容并让其出现在屏幕上的速度就越快。要减少字节数，我们可以减少资源数（将它们删除或设为非关键资源），此外还要压缩和优化各项资源，确保最大限度减小传送大小。")]),v._v(" "),e("p",[v._v("优化关键渲染路径的常规步骤如下：")]),v._v(" "),e("p",[v._v("（1）对关键路径进行分析和特性描述：资源数、字节数、长度。"),e("br"),v._v("\n（2）最大限度减少关键资源的数量：删除它们，延迟它们的下载，将它们标记为异步等。"),e("br"),v._v("\n（3）优化关键字节数以缩短下载时间（往返次数）。"),e("br"),v._v("\n（4）优化其余关键资源的加载顺序：您需要尽早下载所有关键资产，以缩短关键路径长度。")]),v._v(" "),e("h2",{attrs:{id:"什么是重绘和回流-浏览器绘制过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是重绘和回流-浏览器绘制过程"}},[v._v("#")]),v._v(" 什么是重绘和回流？（浏览器绘制过程）")]),v._v(" "),e("p",[v._v("重绘: 当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格，而不会影响布局的操作，比如 "),e("code",[v._v("background-color")]),v._v("，我们将这样的操作称为重绘。"),e("br"),v._v("\n回流：当渲染树中的一部分（或全部）因为元素的规模尺寸、布局、隐藏等改变而需要重新构建的操作，会影响到布局的操作，这样的操作我们称为回流。")]),v._v(" "),e("p",[v._v("常见引起回流属性和方法："),e("br"),v._v("\n任何会改变元素几何信息（元素的位置和尺寸大小）的操作，都会触发回流。"),e("br"),v._v("\n（1）添加或者删除可见的 "),e("code",[v._v("DOM")]),v._v(" 元素；"),e("br"),v._v("\n（2）元素尺寸改变——边距、填充、边框、宽度和高度"),e("br"),v._v("\n（3）内容变化，比如用户在 "),e("code",[v._v("input")]),v._v(" 框中输入文字"),e("br"),v._v("\n（4）浏览器窗口尺寸改变——"),e("code",[v._v("resize")]),v._v("事件发生时"),e("br"),v._v("\n（5）计算 "),e("code",[v._v("offsetWidth")]),v._v(" 和 "),e("code",[v._v("offsetHeight")]),v._v(" 属性"),e("br"),v._v("\n（6）设置 "),e("code",[v._v("style")]),v._v(" 属性的值"),e("br"),v._v("\n（7）当你修改网页的默认字体时。")]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),e("p",[v._v("回流必定会发生重绘，重绘不一定会引发回流。回流所需的成本比重绘高的多，改变父节点里的子节点很可能会导致父节点的一系列回流。")])]),v._v(" "),e("h2",{attrs:{id:"如何减少回流-浏览器绘制过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何减少回流-浏览器绘制过程"}},[v._v("#")]),v._v(" 如何减少回流？（浏览器绘制过程）")]),v._v(" "),e("p",[v._v("（1）使用 "),e("code",[v._v("transform")]),v._v(" 替代 "),e("code",[v._v("top")]),e("br"),v._v("\n（2）不要把节点的属性值放在一个循环里当成循环里的变量"),e("br"),v._v("\n（3）不要使用 "),e("code",[v._v("table")]),v._v(" 布局，可能很小的一个小改动会造成整个 "),e("code",[v._v("table")]),v._v(" 的重新布局"),e("br"),v._v("\n（4）把 DOM 离线后修改。如：使用 "),e("code",[v._v("documentFragment")]),v._v(" 对象在内存里操作 DOM"),e("br"),v._v("\n（5）不要一条一条地修改 "),e("code",[v._v("DOM")]),v._v(" 的样式。与其这样，还不如预先定义好 "),e("code",[v._v("css")]),v._v(" 的 "),e("code",[v._v("class")]),v._v("，然后修改 "),e("code",[v._v("DOM")]),v._v(" 的 "),e("code",[v._v("className")])]),v._v(" "),e("h2",{attrs:{id:"domcontentloaded-事件和-load-事件的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#domcontentloaded-事件和-load-事件的区别"}},[v._v("#")]),v._v(" DOMContentLoaded 事件和 Load 事件的区别？")]),v._v(" "),e("p",[v._v("当初始的 "),e("code",[v._v("HTML")]),v._v(" 文档被完全加载和解析完成之后，"),e("code",[v._v("DOMContentLoaded")]),v._v(" 事件被触发，而无需等待样式表、图像和子框架的加载完成。"),e("br"),v._v(" "),e("code",[v._v("Load")]),v._v(" 事件是当所有资源加载完成后触发的。")]),v._v(" "),e("h2",{attrs:{id:"html5-有哪些新特性、移除了那些元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html5-有哪些新特性、移除了那些元素"}},[v._v("#")]),v._v(" HTML5 有哪些新特性、移除了那些元素？")]),v._v(" "),e("p",[e("code",[v._v("HTML5")]),v._v(" 现在已经不是 "),e("code",[v._v("SGML")]),v._v(" 的子集，主要是关于图像，位置，存储，多任务等功能的增加。")]),v._v(" "),e("p",[v._v("新增的有：")]),v._v(" "),e("p",[v._v("绘画 "),e("code",[v._v("canvas")]),e("br"),v._v("\n用于媒介回放的 "),e("code",[v._v("video")]),v._v(" 和 "),e("code",[v._v("audio")]),v._v(" 元素"),e("br"),v._v("\n本地离线存储 "),e("code",[v._v("localStorage")]),v._v(" 长期存储数据，浏览器关闭后数据不丢失"),e("br"),v._v(" "),e("code",[v._v("sessionStorage")]),v._v(" 的数据在浏览器关闭后自动删除"),e("br"),v._v("\n语意化更好的内容元素，比如 "),e("code",[v._v("article、footer、header、nav、section")]),e("br"),v._v("\n表单控件，"),e("code",[v._v("calendar、date、time、email、url、search")]),e("br"),v._v("\n新的技术 "),e("code",[v._v("webworker")]),v._v(", "),e("code",[v._v("websocket")]),e("br"),v._v("\n新的文档属性 "),e("code",[v._v("document.visibilityState")])]),v._v(" "),e("p",[v._v("移除的元素有：")]),v._v(" "),e("p",[v._v("纯表现的元素："),e("code",[v._v("basefont，big，center，font, s，strike，tt，u")]),e("br"),v._v("\n对可用性产生负面影响的元素："),e("code",[v._v("frame，frameset，noframes")])]),v._v(" "),e("h2",{attrs:{id:"如何处理-html5-新标签的浏览器兼容问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何处理-html5-新标签的浏览器兼容问题"}},[v._v("#")]),v._v(" 如何处理 HTML5 新标签的浏览器兼容问题？")]),v._v(" "),e("p",[e("code",[v._v("IE8/IE7/IE6")]),v._v(" 支持通过 "),e("code",[v._v("document.createElement")]),v._v(" 方法产生的标签，可以利用这一特性让这些浏览器支持 "),e("code",[v._v("HTML5")]),v._v(" 新标签，浏览器支持新标签后，还需要添加标签默认的样式。"),e("br"),v._v("\n当然也可以直接使用成熟的框架，比如 html5shiv ;")]),v._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[v._v('\x3c!--[if lt IE 9]>\n\t<script> src="https://cdn.jsdelivr.net/npm/html5shiv/dist/html5shiv.min.js"<\/script>\n<![endif]--\x3e')]),v._v("\n")])])]),e("p",[e("code",[v._v("[if lte IE 9]……[endif]")]),v._v(" 判断 IE 的版本，限定只有 IE9 以下浏览器版本需要执行的语句。")]),v._v(" "),e("h2",{attrs:{id:"简述一下你对-html-语义化的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简述一下你对-html-语义化的理解"}},[v._v("#")]),v._v(" 简述一下你对 HTML 语义化的理解？")]),v._v(" "),e("p",[v._v("（1） 用正确的标签做正确的事情。"),e("br"),v._v("\n（2） "),e("code",[v._v("html")]),v._v(" 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;"),e("br"),v._v("\n（3） 即使在没有样式 "),e("code",[v._v("CSS")]),v._v(" 情况下也以一种文档格式显示，并且是容易阅读的;"),e("br"),v._v("\n（4） 搜索引擎的爬虫也依赖于 "),e("code",[v._v("HTML")]),v._v(" 标记来确定上下文和各个关键字的权重，利于 "),e("code",[v._v("SEO")]),v._v(" ;"),e("br"),v._v("\n（5） 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。")]),v._v(" "),e("h2",{attrs:{id:"前端需要注意哪些-seo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端需要注意哪些-seo"}},[v._v("#")]),v._v(" 前端需要注意哪些 SEO ？")]),v._v(" "),e("p",[v._v("（1）合理的 "),e("code",[v._v("title、description、keywords")]),v._v("：搜索对着三项的权重逐个减小，"),e("code",[v._v("title")]),v._v(" 值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面 "),e("code",[v._v("title")]),v._v(" 要有所不同；"),e("code",[v._v("description")]),v._v(" 把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面 "),e("code",[v._v("description")]),v._v(" 有所不同；"),e("code",[v._v("keywords")]),v._v(" 列举出重要关键词即可。"),e("br"),v._v("\n（2）语义化的 "),e("code",[v._v("HTML")]),v._v(" 代码，符合 "),e("code",[v._v("W3C")]),v._v(" 规范：语义化代码让搜索引擎容易理解网页。"),e("br"),v._v("\n（3）重要内容 "),e("code",[v._v("HTML")]),v._v(" 代码放在最前：搜索引擎抓取 "),e("code",[v._v("HTML")]),v._v(" 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容肯定被抓取。"),e("br"),v._v("\n（4）重要内容不要用 "),e("code",[v._v("js")]),v._v(" 输出：爬虫不会执行 "),e("code",[v._v("js")]),v._v(" 获取内容"),e("br"),v._v("\n（5）少用 "),e("code",[v._v("iframe")]),v._v("：搜索引擎不会抓取 "),e("code",[v._v("iframe")]),v._v(" 中的内容"),e("br"),v._v("\n（6）非装饰性图片必须加 "),e("code",[v._v("alt")]),v._v("\n（7）提高网站速度：网站速度是搜索引擎排序的一个重要指标")]),v._v(" "),e("h2",{attrs:{id:"浏览器是怎么对-html5-的离线储存资源进行管理和加载的呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器是怎么对-html5-的离线储存资源进行管理和加载的呢"}},[v._v("#")]),v._v(" 浏览器是怎么对 HTML5 的离线储存资源进行管理和加载的呢？")]),v._v(" "),e("p",[v._v("在线的情况下，浏览器发现 "),e("code",[v._v("html")]),v._v(" 头部有 "),e("code",[v._v("manifest")]),v._v(" 属性，它会请求 "),e("code",[v._v("manifest")]),v._v(" 文件，如果是第一次访问app ，那么浏览器就会根据 "),e("code",[v._v("manifest")]),v._v(" 文件的内容下载相应的资源并且进行离线存储。如果已经访问过 app 并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的 "),e("code",[v._v("manifest")]),v._v(" 文件与旧的 "),e("code",[v._v("manifest")]),v._v(" 文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。")]),v._v(" "),e("p",[v._v("离线的情况下，浏览器就直接使用离线存储的资源。")]),v._v(" "),e("h2",{attrs:{id:"请描述一下-cookies-sessionstorage-和-localstorage-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请描述一下-cookies-sessionstorage-和-localstorage-的区别"}},[v._v("#")]),v._v(" 请描述一下 cookies，sessionStorage 和 localStorage 的区别？")]),v._v(" "),e("p",[v._v("浏览器端常用的存储技术是 "),e("code",[v._v("cookie")]),v._v(" 、"),e("code",[v._v("localStorage")]),v._v(" 和 "),e("code",[v._v("sessionStorage")]),v._v("。")]),v._v(" "),e("p",[e("code",[v._v("cookie")]),v._v(" 其实最开始是服务器端用于记录用户状态的一种方式，由服务器设置，在客户端存储，然后每次发起同源请求时，发送给服务器端。"),e("code",[v._v("cookie")]),v._v(" 最多能存储 "),e("code",[v._v("4 k")]),v._v(" 数据，它的生存时间由 "),e("code",[v._v("expires")]),v._v(" 属性指定，并且 "),e("code",[v._v("cookie")]),v._v(" 只能被同源的页面访问共享。")]),v._v(" "),e("p",[e("code",[v._v("sessionStorage")]),v._v(" 是 "),e("code",[v._v("html5")]),v._v(" 提供的一种浏览器本地存储的方法，它借鉴了服务器端 "),e("code",[v._v("session")]),v._v(" 的概念，代表的是一次会话中所保存的数据。它一般能够存储 "),e("code",[v._v("5M")]),v._v(" 或者更大的数据，它在当前窗口关闭后就失效,"),e("code",[v._v("sessionStorage")]),v._v(" 只能被同一个窗口的同源页面所访问共享。")]),v._v(" "),e("p",[e("code",[v._v("localStorage")]),v._v(" 也是 "),e("code",[v._v("html5")]),v._v(" 提供的一种浏览器本地存储的方法，它一般也能够存储 "),e("code",[v._v("5M")]),v._v(" 或者更大的数据。它和 "),e("code",[v._v("sessionStorage")]),v._v("不同的是，除非手动删除它，否则它不会失效，并且 "),e("code",[v._v("localStorage")]),v._v(" 也只能被同源页面所访问共享。")]),v._v(" "),e("p",[v._v("上面几种方式都是存储少量数据的时候的存储方式，当我们需要在本地存储大量数据的时候，我们可以使用浏览器的 "),e("code",[v._v("indexDB")]),v._v(" 这是浏览器提供的一种本地的数据库存储机制。它不是关系型数据库，它内部采用对象仓库的形式存储数据，它更接近 "),e("code",[v._v("NoSQL")]),v._v("数据库。")]),v._v(" "),e("h2",{attrs:{id:"iframe-有那些缺点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iframe-有那些缺点"}},[v._v("#")]),v._v(" iframe 有那些缺点？")]),v._v(" "),e("p",[e("code",[v._v("iframe")]),v._v(" 元素会创建包含另外一个文档的内联框架（即行内框架）。")]),v._v(" "),e("p",[v._v("主要缺点有：")]),v._v(" "),e("p",[v._v("（1） "),e("code",[v._v("iframe")]),v._v(" 会阻塞主页面的 "),e("code",[v._v("onload")]),v._v(" 事件。"),e("code",[v._v("window")]),v._v(" 的 "),e("code",[v._v("onload")]),v._v(" 事件需要在所有 "),e("code",[v._v("iframe")]),v._v(" 加载完毕后（包含里面的元素）才会触发。在 "),e("code",[v._v("Safari")]),v._v(" 和 "),e("code",[v._v("Chrome")]),v._v(" 里，通过 "),e("code",[v._v("JavaScript")]),v._v(" 动态设置 "),e("code",[v._v("iframe")]),v._v(" 的 "),e("code",[v._v("src")]),v._v(" 可以避免这种阻塞情况。"),e("br"),v._v("\n（2） 搜索引擎的检索程序无法解读这种页面，不利于网页的 "),e("code",[v._v("SEO")]),v._v(" 。"),e("br"),v._v("\n（3） "),e("code",[v._v("iframe")]),v._v(" 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。"),e("br"),v._v("\n（4） 浏览器的后退按钮失效。"),e("br"),v._v("\n（5） 小型的移动设备无法完全显示框架。")]),v._v(" "),e("h2",{attrs:{id:"label-的作用是什么-是怎么用的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#label-的作用是什么-是怎么用的"}},[v._v("#")]),v._v(" Label 的作用是什么？是怎么用的？")]),v._v(" "),e("p",[e("code",[v._v("label")]),v._v(" 标签来定义表单控制间的关系，当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。")]),v._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("label")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("for")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("Number:"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("label")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("input")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("type")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),v._v("“text“")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("name")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),v._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("id")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),v._v("Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("/>")])]),v._v("\n")])])]),e("h2",{attrs:{id:"html5-的-form-的自动完成功能是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html5-的-form-的自动完成功能是什么"}},[v._v("#")]),v._v(" HTML5 的 form 的自动完成功能是什么？")]),v._v(" "),e("p",[e("code",[v._v("autocomplete")]),v._v(" 属性规定输入字段是否应该启用自动完成功能。默认为启用，设置为 "),e("code",[v._v("autocomplete=off")]),v._v(" 可以关闭该功能。")]),v._v(" "),e("p",[v._v("自动完成允许浏览器预测对字段的输入。当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。")]),v._v(" "),e("p",[e("code",[v._v("autocomplete")]),v._v(" 属性适用于 "),e("code",[v._v("<form>")]),v._v("，以及下面的 "),e("code",[v._v("<input>")]),v._v(" 类型："),e("code",[v._v("text, search, url, telephone, email, password, datepickers, range 以及 color")]),v._v("。")]),v._v(" "),e("h2",{attrs:{id:"如何实现浏览器内多个标签页之间的通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何实现浏览器内多个标签页之间的通信"}},[v._v("#")]),v._v(" 如何实现浏览器内多个标签页之间的通信?")]),v._v(" "),e("p",[v._v("实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。")]),v._v(" "),e("p",[v._v("第一种实现的方式是使用 "),e("code",[v._v("websocket")]),v._v(" 协议，因为 "),e("code",[v._v("websocket")]),v._v(" 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。\n标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。")]),v._v(" "),e("p",[v._v("第二种是使用 "),e("code",[v._v("ShareWorker")]),v._v(" 的方式，"),e("code",[v._v("shareWorker")]),v._v(" 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。")]),v._v(" "),e("p",[v._v("第三种方式是使用 "),e("code",[v._v("localStorage")]),v._v(" 的方式，我们可以在一个标签页对 "),e("code",[v._v("localStorage")]),v._v(" 的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候 "),e("code",[v._v("localStorage")]),v._v(" 对象就是充当的中介者的角色。")]),v._v(" "),e("p",[v._v("还有一种方式是使用 "),e("code",[v._v("postMessage")]),v._v(" 方法，如果我们能够获得对应标签页的引用，我们就可以使用 "),e("code",[v._v("postMessage")]),v._v(" 方法，进行通信。")]),v._v(" "),e("h2",{attrs:{id:"websocket-如何兼容低版本浏览器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#websocket-如何兼容低版本浏览器"}},[v._v("#")]),v._v(" webSocket 如何兼容低版本浏览器？")]),v._v(" "),e("p",[e("code",[v._v("Adobe Flash Socket")]),e("br"),v._v(" "),e("code",[v._v("ActiveX HTMLFile (IE)")]),e("br"),v._v(" "),e("code",[v._v("基于 multipart 编码发送 XHR")]),e("br"),v._v(" "),e("code",[v._v("基于长轮询的 XHR")])]),v._v(" "),e("h2",{attrs:{id:"页面可见性-page-visibility-api-可以有哪些用途"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#页面可见性-page-visibility-api-可以有哪些用途"}},[v._v("#")]),v._v(" 页面可见性（Page Visibility API） 可以有哪些用途？")]),v._v(" "),e("p",[v._v("这个新的 API 的意义在于，通过监听网页的可见性，可以预判网页的卸载，还可以用来节省资源，减缓电能的消耗。比如，一旦用户不看网页，下面这些网页行为都是可以暂停的。")]),v._v(" "),e("p",[v._v("（1）对服务器的轮询"),e("br"),v._v("\n（2）网页动画"),e("br"),v._v("\n（3）正在播放的音频或视频")]),v._v(" "),e("h2",{attrs:{id:"如何在页面上实现一个圆形的可点击区域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何在页面上实现一个圆形的可点击区域"}},[v._v("#")]),v._v(" 如何在页面上实现一个圆形的可点击区域？")]),v._v(" "),e("p",[v._v("（1）纯 "),e("code",[v._v("html")]),v._v(" 实现，使用 "),e("code",[v._v("<area>")]),v._v(" 来给 "),e("code",[v._v("<img>")]),v._v(" 图像标记热点区域的方式，"),e("code",[v._v("<map>")]),v._v(" 标签用来定义一个客户端图像映射，"),e("code",[v._v("<area>")]),v._v(" 标签用来定义图像映射中的区域，"),e("code",[v._v("area")]),v._v(" 元素永远嵌套在 "),e("code",[v._v("map")]),v._v(" 元素内部，我们可以将 "),e("code",[v._v("area")]),v._v(" 区域设置为圆形，从而实现可点击的圆形区域。")]),v._v(" "),e("p",[v._v("（2）纯 "),e("code",[v._v("css")]),v._v(" 实现，使用 "),e("code",[v._v("border-radius")]),v._v(" ，当 "),e("code",[v._v("border-radius")]),v._v(" 的长度等于宽高相等的元素值的一半时，即可实现一个圆形的点击区域。")]),v._v(" "),e("p",[v._v("（3）纯 "),e("code",[v._v("js")]),v._v(" 实现，判断一个点在不在圆上的简单算法，通过监听文档的点击事件，获取每次点击时鼠标的位置，判断该位置是否在我们规定的圆形区域内。")]),v._v(" "),e("h2",{attrs:{id:"实现不使用-border-画出-1-px-高的线-在不同浏览器的标准模式与怪异模式下都能保持一致的效果。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现不使用-border-画出-1-px-高的线-在不同浏览器的标准模式与怪异模式下都能保持一致的效果。"}},[v._v("#")]),v._v(" 实现不使用 border 画出 1 px 高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。")]),v._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("<")]),v._v("div")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token style-attr"}},[e("span",{pre:!0,attrs:{class:"token attr-name"}},[v._v("style")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[v._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')]),e("span",{pre:!0,attrs:{class:"token style language-css"}},[e("span",{pre:!0,attrs:{class:"token property"}},[v._v("height")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("1px"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),e("span",{pre:!0,attrs:{class:"token property"}},[v._v("overflow")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("hidden"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),e("span",{pre:!0,attrs:{class:"token property"}},[v._v("background")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(":")]),v._v("red")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v('"')])])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("</")]),v._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(">")])]),v._v("\n")])])]),e("h2",{attrs:{id:"title-与-h1-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#title-与-h1-的区别"}},[v._v("#")]),v._v(" title 与 h1 的区别？")]),v._v(" "),e("p",[e("code",[v._v("title")]),v._v(" 属性没有明确意义只表示是个标题，"),e("code",[v._v("h1")]),v._v(" 则表示层次明确的标题，对页面信息的抓取也有很大的影响。")]),v._v(" "),e("h2",{attrs:{id:"的-title-和-alt-有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#的-title-和-alt-有什么区别"}},[v._v("#")]),v._v(" "),e("img"),v._v(" 的 title 和 alt 有什么区别？")]),v._v(" "),e("p",[e("code",[v._v("title")]),v._v(" 通常当鼠标滑动到元素上的时候显示")]),v._v(" "),e("p",[e("code",[v._v("alt")]),v._v(" 是 "),e("code",[v._v("<img>")]),v._v(" 的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。")]),v._v(" "),e("h2",{attrs:{id:"canvas-和-svg-有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#canvas-和-svg-有什么区别"}},[v._v("#")]),v._v(" Canvas 和 SVG 有什么区别？")]),v._v(" "),e("p",[e("code",[v._v("Canvas")]),v._v(" 是一种通过 "),e("code",[v._v("JavaScript")]),v._v(" 来绘制 "),e("code",[v._v("2D 图形")]),v._v("的方法。"),e("code",[v._v("Canvas")]),v._v(" 是逐像素来进行渲染的，因此当我们对 "),e("code",[v._v("Canvas")]),v._v(" 进行缩放时，会出现锯齿或者失真的情况。")]),v._v(" "),e("p",[e("code",[v._v("SVG")]),v._v(" 是一种使用 "),e("code",[v._v("XML")]),v._v(" 描述 "),e("code",[v._v("2D 图形")]),v._v("的语言。"),e("code",[v._v("SVG")]),v._v(" 基于 "),e("code",[v._v("XML")]),v._v("，这意味着 "),e("code",[v._v("SVG DOM")]),v._v(" 中的每个元素都是可用的。我们可以为某个元素附加 "),e("code",[v._v("JavaScript")]),v._v(" 事件监听函数。并且 "),e("code",[v._v("SVG")]),v._v(" 保存的是图形的绘制方法，因此当 "),e("code",[v._v("SVG")]),v._v(" 图形缩放时并不会失真。")]),v._v(" "),e("h2",{attrs:{id:"网页验证码是干嘛的-是为了解决什么安全问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网页验证码是干嘛的-是为了解决什么安全问题"}},[v._v("#")]),v._v(" 网页验证码是干嘛的，是为了解决什么安全问题？")]),v._v(" "),e("p",[v._v("（1）区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水"),e("br"),v._v("\n（2）有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试")]),v._v(" "),e("h2",{attrs:{id:"渐进增强和优雅降级的定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渐进增强和优雅降级的定义"}},[v._v("#")]),v._v(" 渐进增强和优雅降级的定义")]),v._v(" "),e("p",[v._v("渐进增强：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。"),e("br"),v._v("\n优雅降级：一开始就根据高版本浏览器构建完整的功能，然后再针对低版本浏览器进行兼容。")]),v._v(" "),e("h2",{attrs:{id:"attribute-和-property-的区别是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#attribute-和-property-的区别是什么"}},[v._v("#")]),v._v(" attribute 和 property 的区别是什么？")]),v._v(" "),e("p",[e("code",[v._v("attribute")]),v._v("是 "),e("code",[v._v("dom")]),v._v(" 元素在文档中作为 "),e("code",[v._v("html")]),v._v("标签拥有的属性；"),e("br"),v._v(" "),e("code",[v._v("property")]),v._v(" 就是 "),e("code",[v._v("dom")]),v._v(" 元素在 "),e("code",[v._v("js")]),v._v(" 中作为对象拥有的属性。"),e("br"),v._v("\n对于 "),e("code",[v._v("html")]),v._v(" 的标准属性来说，"),e("code",[v._v("attribute")]),v._v(" 和 "),e("code",[v._v("property")]),v._v(" 是同步的，是会自动更新的，"),e("br"),v._v("\n但是对于自定义的属性来说，他们是不同步的。")]),v._v(" "),e("h2",{attrs:{id:"对-web-标准、可用性、可访问性的理解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对-web-标准、可用性、可访问性的理解"}},[v._v("#")]),v._v(" 对 web 标准、可用性、可访问性的理解")]),v._v(" "),e("p",[e("code",[v._v("可用性（Usability")]),v._v("）：产品是否容易上手，用户能否完成任务，效率如何，以及这过程中用户的主观感受可好，是从用户的角度来看产品的质量。可用性好意味着产品质量高，是企业的核心竞争力")]),v._v(" "),e("p",[e("code",[v._v("可访问性（Accessibility）")]),v._v("：Web 内容对于残障用户的可阅读和可理解性")]),v._v(" "),e("p",[e("code",[v._v("可维护性（Maintainability）")]),v._v("：一般包含两个层次，一是当系统出现问题时，快速定位并解决问题的成本，成本低则可维护性好。二是代码是否容易被人理解，是否容易修改和增强功能。")]),v._v(" "),e("h2",{attrs:{id:"ie-各版本和-chrome-可以并行下载多少个资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ie-各版本和-chrome-可以并行下载多少个资源"}},[v._v("#")]),v._v(" IE 各版本和 Chrome 可以并行下载多少个资源？")]),v._v(" "),e("p",[v._v("（1）  "),e("code",[v._v("IE6")]),v._v("2 个并发"),e("br"),v._v("\n（2）  "),e("code",[v._v("iE7")]),v._v(" 升级之后的 6 个并发，之后版本也是 6 个"),e("br"),v._v("\n（3）  "),e("code",[v._v("Firefox")]),v._v("，"),e("code",[v._v("chrome")]),v._v(" 也是6个")]),v._v(" "),e("h2",{attrs:{id:"flash、ajax-各自的优缺点-在使用中如何取舍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#flash、ajax-各自的优缺点-在使用中如何取舍"}},[v._v("#")]),v._v(" Flash、Ajax 各自的优缺点，在使用中如何取舍？")]),v._v(" "),e("p",[e("code",[v._v("Flash")]),v._v("："),e("br"),v._v("\n（1） "),e("code",[v._v("Flash")]),v._v(" 适合处理多媒体、矢量图形、访问机器"),e("br"),v._v("\n（2） 对 "),e("code",[v._v("CSS")]),v._v("、处理文本上不足，不容易被搜索")]),v._v(" "),e("p",[e("code",[v._v("Ajax")]),v._v("："),e("br"),v._v("\n（1） "),e("code",[v._v("Ajax")]),v._v(" 对 "),e("code",[v._v("CSS")]),v._v("、文本支持很好，支持搜索"),e("br"),v._v("\n（2） 多媒体、矢量图形、机器访问不足")]),v._v(" "),e("p",[v._v("共同点："),e("br"),v._v("\n（1） 与服务器的无刷新传递消息"),e("br"),v._v("\n（2） 可以检测用户离线和在线状态"),e("br"),v._v("\n（3） 操作 "),e("code",[v._v("DOM")])]),v._v(" "),e("h2",{attrs:{id:"css-reset-和-normalize-css-有什么区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#css-reset-和-normalize-css-有什么区别"}},[v._v("#")]),v._v(" css reset 和 normalize.css 有什么区别？")]),v._v(" "),e("p",[e("code",[v._v("css reset")]),v._v(" 是最早的一种解决浏览器间样式不兼容问题的方案，它的基本思想是将浏览器的所有样式都重置掉，从而达到所有浏览器样式保持一致的效果。但是使用这种方法，可能会带来一些性能上的问题，并且对于一些元素的不必要的样式的重置，其实反而会造成画蛇添足的效果。")]),v._v(" "),e("p",[v._v("后面出现一种更好的解决浏览器间样式不兼容的方法，就是 "),e("code",[v._v("normalize.css")]),v._v(" ，它的思想是尽量的保留浏览器自带的样式，通过在原有的样式的基础上进行调整，来保持各个浏览器间的样式表现一致。相对与 "),e("code",[v._v("css reset")]),v._v("，"),e("code",[v._v("normalize.css")]),v._v(" 的方法保留了有价值的默认值，并且修复了一些浏览器的 "),e("code",[v._v("bug")]),v._v("，而且使用 "),e("code",[v._v("normalize.css")]),v._v(" 不会造成元素复杂的继承链。")]),v._v(" "),e("h2",{attrs:{id:"dhtml-是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dhtml-是什么"}},[v._v("#")]),v._v(" DHTML 是什么？")]),v._v(" "),e("p",[e("code",[v._v("DHTML")]),v._v(" 将 "),e("code",[v._v("HTML")]),v._v("、"),e("code",[v._v("JavaScript")]),v._v("、"),e("code",[v._v("DOM")]),v._v(" 以及 "),e("code",[v._v("CSS")]),v._v(" 组合在一起，用于创造动态性更强的网页。通过 "),e("code",[v._v("JavaScript")]),v._v(" 和 "),e("code",[v._v("HTML DOM")]),v._v("，能够动态地改变 "),e("code",[v._v("HTML")]),v._v(" 元素的样式。")]),v._v(" "),e("p",[e("code",[v._v("DHTML")]),v._v(" 实现了网页从 "),e("code",[v._v("Web")]),v._v(" 服务器下载后无需再经过服务的处理，而在浏览器中直接动态地更新网页的内容、排版样式和动画的功能。例如，当鼠标指针移到文章段落中时，段落能够变成蓝色，或者当鼠标指针移到一个超级链接上时，会自动生成一个下拉式子链接目录等。")]),v._v(" "),e("p",[v._v("包括："),e("br"),v._v("\n（1）"),e("code",[v._v("动态内容（Dynamic Content）")]),v._v("：动态地更新网页内容，可“动态”地插入、修改或删除网页的元件，如文字、图像、标记等。")]),v._v(" "),e("p",[v._v("（2）"),e("code",[v._v("动态排版样式（Dynamic Style Sheets）")]),v._v("："),e("code",[v._v("W3C")]),v._v(" 的 "),e("code",[v._v("CSS")]),v._v(" 样式表提供了设定 "),e("code",[v._v("HTML")]),v._v(" 标记的字体大小、字形、样式、粗细、文字颜色、行高度、加底线或加中间横线、缩排、与边缘距离、靠左右或置中、背景图片或颜色等排版功能，而“动态排版样式”即可以“动态”地改变排版样式。")]),v._v(" "),e("h2",{attrs:{id:"head-标签中必不少的是"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#head-标签中必不少的是"}},[v._v("#")]),v._v(" head 标签中必不少的是？")]),v._v(" "),e("p",[e("code",[v._v("<head>")]),v._v(" 标签用于定义文档的头部，它是所有头部元素的容器。"),e("code",[v._v("<head>")]),v._v(" 中的元素可以引用脚本、指示浏览器在哪里找到样式表、提供元信息等等。")]),v._v(" "),e("p",[v._v("文档的头部描述了文档的各种属性和信息，包括文档的标题、在 "),e("code",[v._v("Web")]),v._v(" 中的位置以及和其他文档的关系等。绝大多数文档头部包含的数据都不会真正作为内容显示给读者。")]),v._v(" "),e("p",[v._v("下面这些标签可用在 head 部分："),e("code",[v._v("<base>, <link>, <meta>, <script>, <style>, 以及 <title>")]),v._v("。")]),v._v(" "),e("p",[e("code",[v._v("<title>")]),v._v(" 定义文档的标题，它是 "),e("code",[v._v("head")]),v._v(" 部分中唯一必需的元素。")]),v._v(" "),e("h2",{attrs:{id:"html5-新增的表单元素有"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html5-新增的表单元素有"}},[v._v("#")]),v._v(" HTML5 新增的表单元素有？")]),v._v(" "),e("p",[e("code",[v._v("datalist")]),v._v(" 规定输入域的选项列表，通过 "),e("code",[v._v("option")]),v._v(" 创建！")]),v._v(" "),e("p",[e("code",[v._v("keygen")]),v._v(" 提供一种验证用户的可靠方法，密钥对生成器，私钥存于客户端，公钥发到服务器，用于之后验证客户端证书！")]),v._v(" "),e("p",[e("code",[v._v("output")]),v._v(" 元素用于不同类型的输出！")]),v._v(" "),e("h2",{attrs:{id:"在-html5-中-哪个方法用于获得用户的当前位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-html5-中-哪个方法用于获得用户的当前位置"}},[v._v("#")]),v._v(" 在 HTML5 中，哪个方法用于获得用户的当前位置？")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[v._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[v._v("getCurrentPosition")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n")])])]),e("h2",{attrs:{id:"disabled-和-readonly-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#disabled-和-readonly-的区别"}},[v._v("#")]),v._v(" disabled 和 readonly 的区别？")]),v._v(" "),e("p",[e("code",[v._v("disabled")]),v._v(" 指当 "),e("code",[v._v("input")]),v._v(" 元素加载时禁用此元素。"),e("code",[v._v("input")]),v._v(" 内容不会随着表单提交。")]),v._v(" "),e("p",[e("code",[v._v("readonly")]),v._v(" 规定输入字段为只读。"),e("code",[v._v("input")]),v._v(" 内容会随着表单提交。")]),v._v(" "),e("p",[v._v("无论设置 "),e("code",[v._v("readonly")]),v._v(" 还是 "),e("code",[v._v("disabled")]),v._v("，通过 "),e("code",[v._v("js")]),v._v("脚本都能更改 "),e("code",[v._v("input")]),v._v(" 的 "),e("code",[v._v("value")])]),v._v(" "),e("h2",{attrs:{id:"前端性能优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端性能优化"}},[v._v("#")]),v._v(" 前端性能优化？")]),v._v(" "),e("p",[v._v("前端性能优化主要是为了提高页面的加载速度，优化用户的访问体验。我认为可以从这些方面来进行优化。")]),v._v(" "),e("p",[v._v("第一个方面是页面的内容方面"),e("br"),v._v("\n（1）通过"),e("code",[v._v("文件合并")]),v._v("、"),e("code",[v._v("css 雪碧图")]),v._v("、使用 "),e("code",[v._v("base64")]),v._v(" 等方式来减少 "),e("code",[v._v("HTTP")]),v._v(" 请求数，避免过多的请求造成等待的情况。"),e("br"),v._v("\n（2）通过 "),e("code",[v._v("DNS")]),v._v(" 缓存等机制来减少 "),e("code",[v._v("DNS")]),v._v(" 的查询次数。"),e("br"),v._v("\n（3）通过设置缓存策略，对常用不变的资源进行缓存。"),e("br"),v._v("\n（4）使用延迟加载的方式，来减少页面首屏加载时需要请求的资源。延迟加载的资源当用户需要访问时，再去请求加载。"),e("br"),v._v("\n（5）通过用户行为，对某些资源使用预加载的方式，来提高用户需要访问资源时的响应速度。")]),v._v(" "),e("p",[v._v("第二个方面是服务器方面"),e("br"),v._v("\n（1）使用 "),e("code",[v._v("CDN")]),v._v(" 服务，来提高用户对于资源请求时的响应速度。"),e("br"),v._v("\n（2）服务器端启用 "),e("code",[v._v("Gzip")]),v._v("、"),e("code",[v._v("Deflate")]),v._v(" 等方式对于传输的资源进行压缩，减小文件的体积。"),e("br"),v._v("\n（3）尽可能减小 "),e("code",[v._v("cookie")]),v._v(" 的大小，并且通过将静态资源分配到其他域名下，来避免对静态资源请求时携带不必要的 "),e("code",[v._v("cookie")])]),v._v(" "),e("p",[v._v("第三个方面是 "),e("code",[v._v("CSS")]),v._v(" 和 "),e("code",[v._v("JavaScript")]),v._v(" 方面"),e("br"),v._v("\n（1）把样式表放在页面的 "),e("code",[v._v("head 标签")]),v._v("中，减少页面的首次渲染的时间。"),e("br"),v._v("\n（2）避免使用 "),e("code",[v._v("@import")]),v._v(" 标签。"),e("br"),v._v("\n（3）尽量把 "),e("code",[v._v("js")]),v._v(" 脚本放在页面底部或者使用 "),e("code",[v._v("defer")]),v._v(" 或 "),e("code",[v._v("async")]),v._v(" 属性，避免脚本的加载和执行阻塞页面的渲染。"),e("br"),v._v("\n（4）通过对 "),e("code",[v._v("JavaScript")]),v._v(" 和 "),e("code",[v._v("CSS")]),v._v(" 的文件进行压缩，来减小文件的体积。")]),v._v(" "),e("h2",{attrs:{id:"扫描二维码登录网页是什么原理-前后两个事件是如何联系的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扫描二维码登录网页是什么原理-前后两个事件是如何联系的"}},[v._v("#")]),v._v(" 扫描二维码登录网页是什么原理，前后两个事件是如何联系的？")]),v._v(" "),e("p",[v._v("核心过程应该是：浏览器获得一个临时 "),e("code",[v._v("id")]),v._v("，通过长连接等待客户端扫描带有此 "),e("code",[v._v("id")]),v._v(" 的二维码后，从长连接中获得客户端上报给 "),e("code",[v._v("server")]),v._v("的帐号信息进行展示。并在客户端点击确认后，获得服务器授信的令牌，进行随后的信息交互过程。在超时、网络断开、其他设备上登录后，此前获得的令牌或丢失、或失效，对授权过程形成有效的安全防护。")]),v._v(" "),e("p",[v._v("二维码登录网页的基本原理是，用户进入登录网页后，服务器生成一个 "),e("code",[v._v("uid")]),v._v(" 来标识一个用户。对应的二维码对应了一个对应 "),e("code",[v._v("uid")]),v._v(" 的链接，任何能够识别二维码的应用都可以获得这个链接，但是它们没有办法和对应登录的服务器响应。比如微信的二维码登录，只有用微信识这个二维码才有效。当微信客户端打开这个链接时，对应的登录服务器就获得了用户的相关信息。这个时候登录网页根据先前的长连接获取到服务器传过来的用户信息进行显示。然后提前预加载一些登录后可能用到的信息。当客户端点击确认授权登陆后，服务器生成一个权限令牌给网页，网页之后使用这个令牌进行信息的交互过程。由于整个授权的过程都是在手机端进行的，因此能够很好的防止 PC 上泛滥的病毒。并且在超时、网络断开、其他设备上登录后，此前获得的令牌或丢失、或失效，对授权过程能够形成有效的安全防护。")]),v._v(" "),e("h2",{attrs:{id:"html-规范中为什么要求引用资源不加协议头http或者https"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#html-规范中为什么要求引用资源不加协议头http或者https"}},[v._v("#")]),v._v(" Html 规范中为什么要求引用资源不加协议头http或者https？")]),v._v(" "),e("p",[v._v("如果用户当前访问的页面是通过 "),e("code",[v._v("HTTPS")]),v._v(" 协议来浏览的，那么网页中的资源也只能通过 "),e("code",[v._v("HTTPS")]),v._v(" 协议来引用，否则浏览器会出现警告信息，不同浏览器警告信息展现形式不同。")]),v._v(" "),e("p",[v._v("为了解决这个问题，我们可以省略 "),e("code",[v._v("URL")]),v._v(" 的协议声明，省略后浏览器照样可以正常引用相应的资源，这项解决方案称为\n"),e("code",[v._v("protocol-relative URL")]),v._v("，暂且可译作协议相对 "),e("code",[v._v("URL")]),v._v("。")]),v._v(" "),e("p",[v._v("如果使用协议相对 "),e("code",[v._v("URL")]),v._v("，无论是使用 "),e("code",[v._v("HTTPS")]),v._v("，还是 "),e("code",[v._v("HTTP")]),v._v(" 访问页面，浏览器都会以相同的协议请求页面中的资源，避免弹出类似的警告信息，同时还可以节省"),e("code",[v._v("5字节")]),v._v("的数据量。")])])}),[],!1,null,null,null);_.default=a.exports}}]);